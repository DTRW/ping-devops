#!/usr/bin/env sh
########################################################################################################################
#
# This script is used to manage a Ping Identity DevOps environment for Docker, Docerk Compose and Kubernetes.
#
# ------------
# Installation
# ------------
#   brew install ping-devops
#   brew upgrade ping-devops
#
# ------------
# Requirements
# ------------
# The script requires the following tools to be installed:
JQ="jq"
BASE64="base64"
OPENSSL="openssl"
KUSTOMIZE="kustomize"
KUBECTL="kubectl"
KUBECTX="kubectx"
KUBENS="kubens"
ENVSUBST="envsubst"
DOCKER="docker"
DOCKER_COMPOSE="docker-compose"
CURL="curl -sL "
#
# In addition, the assumption is that kubectl is configured to authenticate and apply manifests to the Kubernetes
# cluster. For EKS clusters, this requires an AWS key and secret with the appropriate IAM policies to be configured and
# requires that the aws CLI tool and probably the aws-iam-authenticator CLI tool are installed.
#
# Information on all the Variables can be found at:
#    ping-devops topic devops-variables
########################################################################################################################

CWD=$(pwd) 
# shellcheck disable=SC2164
cd "$( dirname "${0}" )"
#THIS="$( basename "${0}" )"
#THIS_DIR=`pwd`

PING_DEVOPS_STANDARD_VARIABLES="
  PING_IDENTITY_DEVOPS_USER
  PING_IDENTITY_DEVOPS_KEY
  PING_IDENTITY_DEVOPS_HOME
  PING_IDENTITY_DEVOPS_REGISTRY
  PING_IDENTITY_DEVOPS_TAG
  PING_IDENTITY_ACCEPT_EULA"

################################################################################
# Version Info
################################################################################
VERSION="0.6.4"

################################################################################
# Ping Identity tools & config information
################################################################################
DOT_PINGIDENTITY="${HOME}/.pingidentity"
DEVOPS_FILE="${DOT_PINGIDENTITY}/devops"
PRINT_DEVOPS_FILE="${HOME}/.pingidentity/devops"
DEVOPS_WORK_DIR="${DOT_PINGIDENTITY}/ping-devops"
test -d "${DEVOPS_WORK_DIR}" || mkdir -p "${DEVOPS_WORK_DIR}"

################################################################################
# Ping DevOps URL & Info
################################################################################
# Note: bit.ly URLs require a header to be be passed in curl (i.e. -H "User-Agent: ping-devops")
PING_DEVOPS_URL="https://bit.ly/ping-devops-json"
PING_DEVOPS_JSON="${DEVOPS_WORK_DIR}/.ping-devops.json"
PING_DEVOPS_GITHUB_CONTENT="https://raw.githubusercontent.com/pingidentity/pingidentity-devops-getting-started/master"
PING_DEVOPS_TOPICS_URL="${PING_DEVOPS_GITHUB_CONTENT}/docs/ping-devops/topics"
PING_DEVOPS_TOPICS_JSON_URL="https://api.github.com/repos/pingidentity/pingidentity-devops-getting-started/contents/docs/ping-devops/topics"
PING_DEVOPS_TOPICS_JSON="${DEVOPS_WORK_DIR}/topics.json"
PING_DEVOPS_MOTD_URL="${PING_DEVOPS_GITHUB_CONTENT}/docs/ping-devops/motd"
PING_DEVOPS_MOTD="${DEVOPS_WORK_DIR}/motd"

################################################################################
# Get Current Kubenetes Info
################################################################################
CURRENT_K8S_CONTEXT="$(kubectl config current-context 2> /dev/null)"
CURRENT_K8S_NAMESPACE="$(kubectl config view --minify --output 'jsonpath={..namespace}' 2> /dev/null)"

################################################################################
# Check for a .pingidentity directory with propertyfile
################################################################################
test -d "${DOT_PINGIDENTITY}" || mkdir -p "${DOT_PINGIDENTITY}"

################################################################################
# Source devops file
################################################################################
# shellcheck disable=SC1090
test -f "${DEVOPS_FILE}" && . "${DEVOPS_FILE}"

# Temporary directory used throughout script and cleaned up at exit
TMP_DIR="$(mktemp -d)"

################################################################################
# cleanup - Ensures that we cleanup any temporary directories we create upon exit
################################################################################
cleanup ()
{
  rm -rf "$TMP_DIR"
}

trap cleanup EXIT

################################################################################
# Terminal codes for echoing of RED or GREEN colors, and back to NORMAL
################################################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
NORMAL='\033[0m'
BOLD='\033[1m'

################################################################################
# echo_red - Echo message in red color
################################################################################
echo_red()
{
    echo "${RED}$*${NORMAL}"
}

################################################################################
# echo_green - Echo message in green color
################################################################################
echo_green()
{
    echo "${GREEN}$*${NORMAL}"
}

################################################################################
# echo_error (message) - Echo's an Error: message
################################################################################
echo_error()
{
    if test  ! -z "$*"; then
      echo "-------------------------------------------------------------------------"
	    echo_red "Error: ${1}"
      echo "-------------------------------------------------------------------------"
    fi
}

banner()
{
  echo "-------------------------------------------------------------------------"
  echo "$*"
  echo "-------------------------------------------------------------------------"

}

run_command()
{
  CMD="${1}"
  CMD_OUTPUT="${2}"
  
  banner "Command: ${BOLD}$CMD $(test ! -z "${CMD_OUTPUT}" && echo "> ${CMD_OUTPUT}")${NORMAL}"
  
  test -z "${CMD_OUTPUT}" && $CMD
  test ! -z "${CMD_OUTPUT}" && $CMD > "${CMD_OUTPUT}"
}


################################################################################
# check_devops_file - Verify that the devops_file is found
################################################################################
check_devops_file()
{
  test ! -f "${DEVOPS_FILE}" \
    && echo_red "No ping-devops config found.  Please run:\n" \
    && echo "  ping-devops config" \
    && exit
}

################################################################################
# check_variables - Verify that certain variables are set
################################################################################
check_variables()
{
  for _var in "${@}"; do
    test -z "$(get_value "${_var}")" \
      && echo_red "Variable is not set: ${_var}" \
      && _var_check_fails=true
  done

  test ${_var_check_fails} \
    && echo \
    && echo "To get more information on these variables:" \
    && echo_green "  ping-devops topic devops-variables" \
    && echo \
    && echo "Set this/these in your config with:" \
    && echo_green "  ping-devops config" \
    && echo \
    && exit
}


################################################################################
USAGE_HEADER="${GREEN}################################################################################
#  Ping Identity DevOps (version $VERSION)"

################################################################################
USAGE_FOOTER="${GREEN}Further help:${NORMAL}
  https://github.com/pingidentity/ping-devops"


################################################################################
# usage - Print any message sent as an error and then the usage information
################################################################################
usage()
{
  echo_error "$*"

  echo "$USAGE_HEADER"

  echo "#
#  Documentation: https://pingidentity-devops.gitbook.io/devops/
#   GitHub Repos: https://github.com/topics/ping-devops
################################################################################${NORMAL}

${GREEN}General Usage:${NORMAL}
  ping-devops config                            # Configure Ping DevOps
  ping-devops info [-v]                         # Print Config Information
  ping-devops version                           # Version Details and Check
  ping-devops topic [ {topic-name} ]            # Short Help Topics

${GREEN}Generate Kubernetes/Kustomize/License Resources:${NORMAL}
  ping-devops generate devops-secret                    # Ping DevOps secret
  ping-devops generate tls-secret {domain}              # TLS Cert/Key (i.e. example.com)
  ping-devops generate ssh-id-secret {ssh id_rsa file}  # SSH ID Key (i.e. ~/.ssh/id_rsa)
  ping-devops generate license {product}                # Eval license file for product
  ping-devops generate license-secret {license file}    # License secret from license file
  ping-devops generate kustomization.yaml               # Skeleton kustomization.yaml

${GREEN}Running Docker/Kubernetes Evironments:${NORMAL}
  ping-devops docker     [info|start|stop|rm|clean]
  ping-devops kubernetes [info|start|rm|clean]  
"

  echo "$USAGE_FOOTER"
  exit
}

################################################################################
# usage_command - print usage info for a specific command
################################################################################
usage_command()
{
  _usageCmd="${1}" && shift

  echo_error "$*"

  echo "$USAGE_HEADER
################################################################################${NORMAL}
"

  case "${_usageCmd}" in
    docker)
      echo "${GREEN}Running Docker Getting Started Containers:${NORMAL}
  ping-devops docker info                      # Lists all available use-cases/products
  ping-devops docker info  {product}           # Information on user-case/product
  ping-devops docker start {product}           # Starts services  (i.e. docker-compose up)
  ping-devops docker stop  {product}           # Stops services   (i.e. docker-compose stop)
  ping-devops docker rm    {product}           # Removes services (i.e. docker-compose down)
  ping-devops docker clean                     # Cleans all ping_devops docker services"
      ;;
    kubernetes)
      echo "${GREEN}Running Kubernetes Getting Started Containers:${NORMAL}
  ping-devops kubernetes info                  # Lists all available use-cases/products
  ping-devops kubernetes info  {product}       # Information on user-case/product
  ping-devops kubernetes start {product}       # Starts services  (i.e. kubectl create)
  ping-devops kubernetes rm    {product}       # Removes services (i.e. kubectl delete)
  ping-devops kubernetes clean                 # Removes all ping_devops kubernetes resources"
      ;;
    *) usage
      ;;
  esac

  echo
  exit
}

################################################################################
# check_for_tool (tool_name)
#
# Using which command, validate that the tool_name is found
################################################################################
check_for_tool()
{
  _tool="${1}"
  which "${_tool}" >/dev/null

  test $? -eq 1 && usage "${_tool} tool not found, please install"
}

################################################################################
# get_value (variable)
#
# Get the value of a vaiable, preserving the spaces
################################################################################
get_value ()
{
  if test ! -z "${1}"; then
    IFS="%%"
    eval printf '%s' "\${${1}}"
    unset IFS
  fi
}

################################################################################
# get_value (variable)
#
# Get the value of a vaiable, preserving the spaces
################################################################################
find_setup_arg_value()
{
  _valToFind="${1}"
  _findFile="${2}"
  _defaultVal="${3}"
  
  _valFound=$(grep "$_valToFind" "${_findFile}" | sed "s/.*$_valToFind \(.*\) .*\\\\$/\1/g")

  test -z "${_valFound}" && _valFound="${_defaultVal}"

  echo "${_valFound}"
}

################################################################################
# add_bash_aliases ()
#
# Ensure that the bash_alias file is a part of .bash_profile
################################################################################
add_bash_aliases()
{


    PING_DEVOPS_BASH_PROFILE="/usr/local/etc/bash_profile.ping-devops"
    BASH_PROFILE="${HOME}/.bash_profile"

    # Touch the .bash_profile incase it's not setup yet
    touch "${BASH_PROFILE}"

    grep "${PING_DEVOPS_BASH_PROFILE}" "${BASH_PROFILE}" > /dev/null

    if test "${?}" == "1"; then
        echo "
################################################################################
#                         Ping Identity DevOps Alias Files
################################################################################

Let's add helper alias' and functions to your shell.  
We are assuming you use bash and will add these to your ${BASH_PROFILE}
"

        echo "  OK if we add a 'source ${PING_DEVOPS_BASH_PROFILE}' command to your ${BASH_PROFILE} (y/n) [y] ? \c"
        read -r answer

        if [ "${answer}" = "" ] || [ "${answer}" = "Y" ] || [ "${answer}" = "y" ]; then
            echo "
# Ping Identity DevOps Aliases - Added with 'ping-devops config' on $(date)
test -f '${PING_DEVOPS_BASH_PROFILE}' && source '${PING_DEVOPS_BASH_PROFILE}'" >> "${BASH_PROFILE}"
        fi
    fi

    grep "sourcePingIdentityFiles" "${BASH_PROFILE}" >/dev/null

    if test "$?" = "1"; then
        echo "  OK if we add a 'sourcePingIdentityFiles' command to your ${BASH_PROFILE} (y/n) [y] ? \c"
        read -r answer
        if [ "${answer}" = "" ] || [ "${answer}" = "Y" ] || [ "${answer}" = "y" ]; then
            echo "
# Source PingIdentity Files Alias - Added with 'ping-devops config' on $(date)
sourcePingIdentityFiles" >> "${BASH_PROFILE}"
        fi
    fi
}

################################################################################
# get_custom_variables ()
#
# Obtain a list of custom variablees
################################################################################
get_custom_variables()
{
    grep -v "^#" "${DEVOPS_FILE}" | \
    while read -r _line
    do
        test -z "${_line}" && continue
        _name="${_line%%=*}"

        echo "${PING_DEVOPS_STANDARD_VARIABLES}" | grep "${_name}" >/dev/null
        _grepRC=$?
        
        if test ${_grepRC} -ne 0; then
            echo "${_name}"
        fi
    done
}

################################################################################
# devops_add_config (file, variable, default, prompt)
#
# Add a config variale to the devops file, using the prompt sent, and defaulting
# if no value is provided.
################################################################################
devops_add_config()
{
  PROPS_FILE="${1}" && shift
  VAR_TO_SET="${1}" && shift
  VAR_DEFAULT="${1}" && shift
  VAR_PROMPT="${*}"

  CURRENT_VALUE=$(get_value "${VAR_TO_SET}")
  test -z "${CURRENT_VALUE}" && CURRENT_VALUE="${VAR_DEFAULT}"

  echo "${VAR_PROMPT}"
  echo "    [${GREEN}${CURRENT_VALUE}${NORMAL}] ? \c"
  read -r answer
  echo

  if test ! -z "${answer}"; then
    if test "${answer}" = "-"; then
      if test -z "${VAR_TO_SET}"; then
        echo >> "${PROPS_FILE}"
      else
        eval "unset \${VAR_TO_SET}"

        # If the variable being uset, is a standard variable, then echo an
        # empty value in the property file, otherwise, lose it from new
        # property file
        echo "${PING_DEVOPS_STANDARD_VARIABLES}" | grep "${VAR_TO_SET}" >/dev/null

        test $? -eq 0 && echo "${VAR_TO_SET}=" >> "${PROPS_FILE}"
      fi
    else
      if test -z "${VAR_TO_SET}"; then
        echo "${answer}" >> "${PROPS_FILE}"
      else
        eval "export \${VAR_TO_SET}=${answer}"
        echo "${VAR_TO_SET}=${answer}" >> "${PROPS_FILE}"
      fi
    fi
  else
    if test -z "${VAR_TO_SET}"; then
        echo "${CURRENT_VALUE}" >> "${PROPS_FILE}"
    else
        echo "${VAR_TO_SET}=${CURRENT_VALUE}" >> "${PROPS_FILE}"
    fi
  fi
}

################################################################################
################################################################################
print_variable_setting_instructions()
{
  echo "
################################################################################
#  Setting Variables:
#      [enter]     to accept current value
#      [-]         to unset the value 
#      new value   to change value
################################################################################
  "
}

################################################################################
# devops_add_config_customize (file)
#
# Add a config variale to the devops file, using the prompt sent, and defaulting
# if no value is provided.
################################################################################
devops_add_config_custom()
{
  PROPS_FILE="${1}" && shift
  _custom_variables="${*}"

  test ! -z "${_custom_variables}" && print_variable_setting_instructions

  for _varName in ${_custom_variables}; do
      devops_add_config "${PROPS_FILE}" "${_varName}"  ""  "Set Custom Variable '${_varName}'"
  done

  echo "
################################################################################
#  Add Additional Variables:
#
#      [enter]     to end adding additional variables
#      NAME=VALUE  to add that variable with setting (i.e. VERBOSE=true)
################################################################################
  "
  
  while true
  do
      echo "Enter a new NAME=VALUE [enter to end] : \c"

      read -r answer

      test -z "${answer}" && break

      echo "$answer" >> "${PROPS_FILE}"
  done
}

################################################################################
# devops_add_comment (file, comment)
#
# Add a comment to the devops file
################################################################################
devops_add_comment()
{
  _TFILE="${1}" && shift
  _MSG="${*}"

  echo "${_MSG}"
  echo "${_MSG}" >> "${_TFILE}"
}

echo_info_variable()
{
  _varToEcho="${1}"

  printf "  %-30s : %s\n" "${_varToEcho}" "$(get_value "${_varToEcho}")"
}

################################################################################
# ping_devops_info ()
#
# Prints all the variables of the ~/.pingidentity/devops file
################################################################################
ping_devops_info()
{
    _show="${1}"

    test "${_show}" != "-v" && PING_IDENTITY_DEVOPS_KEY="*** REDACTED *** (use -v to display)"


    ${CURL} ${PING_DEVOPS_MOTD_URL} \
              --output "${PING_DEVOPS_MOTD}" \
              --fail 2>/dev/null

    _curl_result=$?

    if test ${_curl_result} -ne 0; then
        echo "Unable to retrieve latest news." > "${PING_DEVOPS_MOTD}"
    fi

    # Get the MOTD
    echo "
################################################################################
#     Ping Identity DevOps Information (version $VERSION)
#
#     Latest News from Ping Identity DevOps
#
$(test -f "${PING_DEVOPS_MOTD}" && sed 's/^/#     /' < "${PING_DEVOPS_MOTD}")
#"

echo "################################################################################
#     DevOps variables sourced from ${PRINT_DEVOPS_FILE}
################################################################################
"

    echo_info_variable PING_IDENTITY_DEVOPS_USER
    echo_info_variable PING_IDENTITY_DEVOPS_KEY
    echo
    echo_info_variable PING_IDENTITY_DEVOPS_HOME
    echo_info_variable PING_IDENTITY_DEVOPS_REGISTRY
    echo
    echo_info_variable PING_IDENTITY_DEVOPS_TAG
    echo
    echo_info_variable PING_IDENTITY_ACCEPT_EULA


_listOfCustom_Variables=$(get_custom_variables)

if test ! -z "$_listOfCustom_Variables"; then
  echo "
################################################################################
#     Custom Variables
################################################################################
"

  for _custVar in $_listOfCustom_Variables
  do
      echo_info_variable "${_custVar}"
  done
fi

if test ! -z "${CURRENT_K8S_CONTEXT}" && test ! -z "${CURRENT_K8S_NAMESPACE}"; then
    echo "
################################################################################
#     Current Kubernetes (k8s) Environment
################################################################################
"
    printf "  %-30s : %s\n" "Current k8s Context" "$(get_value CURRENT_K8S_CONTEXT)"
    printf "  %-30s : %s\n" "Current k8s Namespace" "$(get_value CURRENT_K8S_NAMESPACE)"
fi


echo "
################################################################################
 To change config, run: 
    ping-devops config
"
}

print_update_information()
{
  echo "
to update, you can use:
  macosx : brew upgrade ping-devops
  linux  : curl -L https://bit.ly/ping-devops-install | bash"
}
################################################################################
# ping_devops_version ()
#
# Prints tool version info
################################################################################
ping_devops_version()
{
    # Looks for the URL and pulls out the version.  Example should be:
    #
    #      url "https://github.com/pingidentity/ping-devops/archive/v0.5.0.tar.gz"
    #
    _latest_tool_version=$(${CURL} https://bit.ly/ping-devops-version \
      |  grep -e '^  url ".*"$' \
      |  sed "s/.*archive\/v\(.*\)\.tar.*/\1/")

    _curl_result=$?

    test ${_curl_result} -ne 0 || test -z "${_latest_tool_version}" && _latest_tool_version="UNKNOWN"
    
    if test "${_latest_tool_version}" = "${VERSION}" ||
       test "${_latest_tool_version}" = "UNKNOWN"; then
        _version_msg="${GREEN}${VERSION}${NORMAL} (no update required)"
    else
        _version_msg="${RED}${VERSION}${NORMAL} (updated version ${_latest_tool_version} is available)\n$(print_update_information)"
    fi

    echo "ping-devops version ${_version_msg}"
}

################################################################################
# print_topic
#
# topic - topic from pingidentity-devops-getting-started/docs/ping-devops/.
################################################################################
print_topic()
{
  _topic="${1}"

  # Pull the list of topics from the github api
  ${CURL} ${PING_DEVOPS_TOPICS_JSON_URL} \
              --output "${PING_DEVOPS_TOPICS_JSON}" \
              --fail 2>/dev/null

  _curl_result=$?

  if test ${_curl_result} -ne 0; then
      echo "Unable to retrieve list of topics (trying github.com)"
      exit 1
  fi

  if test -z "${_topic}"; then
    echo_green "
################################################################################
#          Ping Identity DevOps Topics
################################################################################
"

    # Print the TOPICS_JSON (which comes from github) as a table
    < "${PING_DEVOPS_TOPICS_JSON}" jq -r "
      [ .[]
        # Map column names to data
        | {              
            Topic: .name
          }
      ]
      # lowercase keys (for predictable sorting, optional)
      | [ .[] | with_entries( .key |= ascii_upcase ) ]

      # print table
      | (.[0] |keys_unsorted | @tsv)   # print header
      , (.[]|.|map(.) |@tsv)           # print data
      " | column -ts "$(printf '\t')"
      
    echo
  else
    echo_green "
################################################################################
#          Ping Identity DevOps Topic: ${_topic}
################################################################################
"
    # Pull the topic from the topics location
    ${CURL} "${PING_DEVOPS_TOPICS_URL}/${_topic}" \
                --output "${DEVOPS_WORK_DIR}/_${_topic}" \
                --fail 2>/dev/null

    _curl_result=$?

    if test ${_curl_result} -ne 0; then
      echo "Unable to retrieve topic '${_topic}'."
      echo
      echo "To get a list of topics:"
      echo_green "  ping-devops topic"
      echo 
      exit 1
    fi

    cat "${DEVOPS_WORK_DIR}/_${_topic}"
    echo
    echo
    echo_green "################################################################################"
  fi
}



################################################################################
################################################################################
generate_resource()
{
    _secret="${1}"

    test -z "${_secret}" && usage

    case "${_secret}" in
        devops-secret)
            check_variables \
                PING_IDENTITY_DEVOPS_USER \
                PING_IDENTITY_DEVOPS_KEY 
                
            check_for_tool $BASE64

            echo "
apiVersion: v1
kind: Secret
metadata:
  name: devops-secret
  annotations:
    ping-devops.user: ${PING_IDENTITY_DEVOPS_USER}
    ping-devops.app-version: v${VERSION}
type: Opaque
data:
  PING_IDENTITY_DEVOPS_USER: $(base64_no_newlines "${PING_IDENTITY_DEVOPS_USER}")
  PING_IDENTITY_DEVOPS_KEY: $(base64_no_newlines "${PING_IDENTITY_DEVOPS_KEY}")
"
            ;;

        tls-secret)
            _domain="${2}"
            test -z "${_domain}" && usage "Missing tls-secret domain"

            check_for_tool $OPENSSL
            check_for_tool $BASE64

            test ! -f /etc/ssl/openssl.cnf && echo_error "Missing /etc/ssl/openssl.cnf" && exit
            
            _opensslcnf="${TMP_DIR}/openssl.cnf"
            _tlsKey="${TMP_DIR}/tls.key"
            _tlsCrt="${TMP_DIR}/tls.crt"

            cat /etc/ssl/openssl.cnf > "${_opensslcnf}"
            printf "[SAN]\nsubjectAltName=DNS:*.%s" "${_domain} " >> "${_opensslcnf}"
            
            $OPENSSL req -x509 -nodes -newkey rsa:2048 -days 3650 -sha256 \
              -out "${_tlsKey}" -keyout "${_tlsCrt}" \
              -subj "/CN=${_domain}" \
              -reqexts SAN -extensions SAN \
              -config "${_opensslcnf}" > /dev/null 2>&1

            echo "
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: tls-secret
  annotations:
    ping-devops.dns-zone: ${_domain}
    ping-devops.app-version: v${VERSION}
data:
  tls.crt: $(base64_no_newlines "${_tlsKey}")
  tls.key: $(base64_no_newlines "${_tlsCrt}")"
            ;;
        ssh-id-secret)
            _idKey="${2}"

            echo "
apiVersion: v1
kind: Secret
metadata:
  name: ssh-id-key-secret
data:
  id_rsa: |
    $(base64_no_newlines "${_idKey}")"
            ;;
        license-secret|license)
            generate_license_secret "${1}" "${2}"
            ;;

        kustomization|kustomization.yaml)
            cd "${CWD}" || echo_error "Unable to cd to ${CWD}"
            echo "Generating a kustomization.yaml for current directory"
            if test -f ./kustomization.yaml; then
                echo_red "ERROR: kustomization.yaml already exists"
            fi

            cat <<EOK >kustomization.yaml
kind: Kustomization
apiVersion: kustomize.config.k8s.io/v1beta1

resources:
EOK
            for f in */; do
              echo "- ${f%/}" >> kustomization.yaml
            done

            for f in *.yaml; do
              test "${f}" != "kustomization.yaml" && echo "- ${f%}" >> kustomization.yaml
            done
            ;;
        *)
            usage "generate" "Unknown resource to generate '${_secret}'"
            ;;
    esac
} 

################################################################################
# generate_license_secret (command, name of product or license file)
#
# Generates a license secret for the passed license file or name of product
#  - license_file or product_name
################################################################################
generate_license_secret()
{
  _licenseType="${1}"
  _licenseArg="${2}"

  case "${_licenseType}" in
      license-secret)
          test ! -f "${_licenseArg}" && usage "Missing license file (i.e. /path/pingfederate.lic)"
          _licenseFile="${_licenseArg}"
          ;;
      license)  
          test -z "${_licenseArg}" && usage "Missing product name (i.e. pingfederate)"
          _licenseProd="${_licenseArg}"
          ;;
      *)
          usage "Unknown generate resource '${_licenseType}"
  esac

  #
  # Creating a Kubernetes License-scret from a license file
  #
  if test ! -z "${_licenseFile}"; then
    _licenseSecret=$(base64_no_newlines "${_licenseFile}")

    echo "
apiVersion: v1
kind: Secret
metadata:
  name: license-secret
data:
  license: |
    ${_licenseSecret}"
  #
  # Getting an evaluation license based on product passed
  else
    case "${_licenseProd}" in
      pingaccess|pingcentral|pingdatametrics|pingdatasync|pingdatagovernance|pingdatagovernancepap|pingdirectory|pingdirectoryproxy|pingfederate)
         
        check_for_tool $DOCKER

        check_variables \
            PING_IDENTITY_DEVOPS_USER \
            PING_IDENTITY_DEVOPS_KEY 

        $DOCKER run --rm -v /tmp:/tmp "${PING_IDENTITY_DEVOPS_REGISTRY}/pingdownloader" \
          --product "${_licenseProd}" \
          --license \
          --devops-user "${PING_IDENTITY_DEVOPS_USER}" \
          --devops-key "${PING_IDENTITY_DEVOPS_KEY}" \
          --devops-app "pingdevops" >/dev/null 2>>/dev/null
        _dockerRunResult=$?

        test $_dockerRunResult -ne 0 && usage "Unable to pull eval license (result=$_dockerRunResult)\nCheck that you can run 'docker version'\nCheck that your PING_IDENTITY_DEVOPS_USER and PING_IDENTITY_DEVOPS_USER are valid." 
      
        cat /tmp/product.lic
        ;;
      *)
        usage "Product or license file not found '${_licenseProd}'"
        ;;
    esac
  fi  
}

################################################################################
# get_ping_devops_json
#
################################################################################
get_ping_devops_json()
{
    # Get the ping-devops.json file
    _curl_result=0
    
    ${CURL} -H "User-Agent: ping-devops" ${PING_DEVOPS_URL} \
              --output "${PING_DEVOPS_JSON}" \
              --fail 2>/dev/null

    _curl_result=$?

    if test ${_curl_result} -ne 0; then
        usage "Unable to get ping-devops.json (trying github.com)"
    fi

    # shellcheck disable=SC2002
    _json_version=$(cat "${PING_DEVOPS_JSON}" | jq -r '.minVersion')

    # shellcheck disable=SC2028
    if test "${_json_version}" != "${VERSION}" &&
       test "$( echo "${_json_version}\\n${VERSION}" | sort -V | head -2 | tail -1)" = "${_json_version}"
    then
      echo "ping-devops update required"
      echo "           current version ${RED}${VERSION}${NORMAL}"
      echo "  minimum required version ${GREEN}${_json_version}${NORMAL}"
      print_update_information
      exit
    fi
}

################################################################################
# print_orchestration_usecase
#
# orchestration - docker or kubernetes
# product       - product or usecase name
# file          - file with comments
################################################################################
print_orchestration_usecase()
{
  _orchestation="${1}"
  _product_usecase="${2}"
  _usecase_file="${3}"

  if test -z "${_product_usecase}"; then
      echo_green "
################################################################################
#          Available ping-devops ${_orchestation} usecase/products
################################################################################
"

      # shellcheck disable=SC2002
      cat "${PING_DEVOPS_JSON}" | jq -r "
          [.${_orchestation}.usecases | .[]

          # Map column names to data
          | {
              Name: .name,
              Description: .description
          }
          ]

          # lowercase keys
          # (for predictable sorting, optional)
          |  [.[]| with_entries( .key |= ascii_upcase ) ]

          # print headers
          | (.[0] |keys_unsorted | @tsv)

          # print data
            , (.[]|.|map(.) |@tsv)                       # print table

          "  | tr '\t' '|' | column -t -s '|'
  else
      grep "^#-" "${_usecase_file}"
  fi

  echo
}


################################################################################
# orchestration_command
#
# Perform a kubernetes command
#  - orchestrator (docker, kubernetes)
#  - command      (info, start, stop, rm, clean)
#  - product      (i.e. pingdirectory, pingfederate)
################################################################################
orchestration_command()
{
    _orchestrator="${1}"
    _cmd="${2}"
    _product="${3}"

    check_devops_file
    check_for_tool $JQ

    case "${_orchestrator}" in
        docker)
            check_for_tool $DOCKER
            check_for_tool $DOCKER_COMPOSE

            check_variables \
                PING_IDENTITY_ACCEPT_EULA \
                PING_IDENTITY_DEVOPS_USER \
                PING_IDENTITY_DEVOPS_KEY \
                PING_IDENTITY_DEVOPS_REGISTRY \
                PING_IDENTITY_DEVOPS_TAG

            _orch_file="docker-compose.yaml"
            ;;
        kubernetes)
            check_for_tool $KUBECTL
            check_for_tool $KUSTOMIZE
            check_for_tool $ENVSUBST
            check_for_tool $KUBECTX
            check_for_tool $KUBENS

            check_variables \
                PING_IDENTITY_ACCEPT_EULA \
                PING_IDENTITY_DEVOPS_USER \
                PING_IDENTITY_DEVOPS_KEY \
                PING_IDENTITY_DEVOPS_REGISTRY \
                PING_IDENTITY_DEVOPS_TAG

            _orch_file="kustomization.yaml"
            ;;
        *) 
            usage "Unknown orchestration '${_orchestrator}'.";;
    esac


    # Get the .ping-devops.json file
    get_ping_devops_json
    
    _docker_compose_project_name="ping_devops"

    #
    # If a product is passed, then we will parse the .ping-devops.json
    # file to get the:
    #   - BaseURL for information
    #   - BaseURL for kustomize URL
    #   - usecase path
    if test ! -z "${_product}"; then
        mkdir -p "${DEVOPS_WORK_DIR}/${_product}"
        # shellcheck disable=SC2002
        _info_base_url=$(cat "${PING_DEVOPS_JSON}" | jq -r ".baseURL")
        # shellcheck disable=SC2002
        _kust_base_url=$(cat "${PING_DEVOPS_JSON}" | jq -r ".baseKustomizeURL")
        # shellcheck disable=SC2002
        _usecase_path=$(cat "${PING_DEVOPS_JSON}" | jq -r ".${_orchestrator}.usecases[] | select ( [.name] == [\"${_product}\"]) | .path")
        
        #
        # If we have a usecase path found, then we will create the URLs
        # to pull the information files as well as creating the options for
        # docker-compose
        if test ! -z "${_usecase_path}"; then
          _info_url="${_info_base_url}/${_usecase_path}/${_orch_file}"
          _kust_url="${_kust_base_url}/${_usecase_path}"

          _orch_file="${DEVOPS_WORK_DIR}/${_product}/${_orch_file}"
          _docker_compose_options="--file ${_orch_file} --project-name ${_docker_compose_project_name}"


          # Get the product orchestration file
          ${CURL} "${_info_url}" \
                --output "${_orch_file}" \
                --fail 2>/dev/null >/dev/null

          _curl_result=$?
        else
          _curl_result=1
        fi
        
        # If we can't find a kustomization.yaml, then we will change the command to info
        # and provide a message that we can't download info for the product.
        if test ${_curl_result} -ne 0; then
            rm -rf "${DEVOPS_WORK_DIR:?}/${_product}"  # :? will cause command to fail
            echo_red "Unable to download info for '${_product}'"
            test ! -z "${_info_url}" && echo_red "  URL: ${_info_url}"
            _cmd="info"
            _product=""
        fi
    else
        case "${_cmd}" in
            start|stop|rm)
                echo_red "Product required to complete command '${_cmd}'"
                _cmd="info"
                ;;
            *)  ;;
        esac
    fi

    case "${_cmd}" in
        info)
            print_orchestration_usecase "${_orchestrator}" "${_product}" "${_orch_file}"
            ;;
        start)
            case "${_orchestrator}" in
                docker)
                    run_command "${DOCKER_COMPOSE} ${_docker_compose_options} pull"
                    run_command "${DOCKER_COMPOSE} ${_docker_compose_options} up --detach"

                    echo
                    grep "^#-" "${_orch_file}"
                    echo "#  Additional Docker Commands
#
#             List Containers - docker container ls
#        Watch Container Logs - docker container logs -f  {container-id}
#   Exec Shell Into Container - docker container exec -it {container-id} /bin/sh
################################################################################
"
                    ;;
                kubernetes)
                    cd "${TMP_DIR}" || echo_red "Unable to change to temporary dir" || exit
                    
                    run_command "ping-devops generate devops-secret" "devops-secret.yaml"
                    run_command "$KUBECTL apply -f devops-secret.yaml"
                    
                    if test ! -z "${PING_IDENTITY_DEVOPS_DNS_ZONE}"; then
                        run_command "ping-devops generate tls-secret ${PING_IDENTITY_DEVOPS_DNS_ZONE}" "tls-secret.yaml"
                        run_command "$KUBECTL apply -f tls-secret.yaml"
                    fi
                    
                    run_command "$KUSTOMIZE build ${_kust_url}" "kustomize_output.yaml"
                    mv kustomize_output.yaml before_envsubst.yaml
                    # shellcheck disable=SC2002
                    cat before_envsubst.yaml | envsubst > kustomize_output.yaml
                    #$KUSTOMIZE build "${_kust_url}" | envsubst > kustomize_output.yaml
                    run_command "$KUBECTL create -f kustomize_output.yaml"

                    cd - > /dev/null || echo_red "Unable to change to previous dir" || exit

                    echo
                    grep "^#-" "${_orch_file}"
                    echo "#  Starting kubernetes deployment of '${_product}'
#  
#     Kustomization URL: ${_kust_url}
#    Kubernetes Context: ${GREEN}${CURRENT_K8S_CONTEXT}${NORMAL}
#  Kubernetes Namespace: ${GREEN}${CURRENT_K8S_NAMESPACE}${NORMAL}
# 
#  Additional kubectl Commands
# 
#             List Containers - kubectl get all
#    Watch Container/Pod Logs - kubectl logs {pod-name} -f
#   Exec Shell Into Container - kubectl exec -it {pod-name} -- /bin/sh
#  Port Forward - HTTP Access - kubectl port-forward service/{service-name} {port}
################################################################################
"

                    ;;
            esac


            ;;
        stop|rm)
            case "${_orchestrator}" in
                docker)
                    test ${_cmd} = "stop" && run_command "${DOCKER_COMPOSE} ${_docker_compose_options} stop"
                    test ${_cmd} = "rm"   && run_command "${DOCKER_COMPOSE} ${_docker_compose_options} down"
                    ;;
                kubernetes)
                    cd "${TMP_DIR}" || echo_red "Unable to change to temporary dir" || exit
                    
                    run_command "$KUSTOMIZE build ${_kust_url}" "kustomize_output.yaml"
                    mv kustomize_output.yaml before_envsubst.yaml
                    # shellcheck disable=SC2002
                    cat before_envsubst.yaml | envsubst > kustomize_output.yaml
                    #$KUSTOMIZE build "${_kust_url}" | envsubst > kustomize_output.yaml
                    run_command "$KUBECTL delete -f kustomize_output.yaml"

                    cd - > /dev/null || echo_red "Unable to change to previous dir" || exit
                    ;;
            esac
            ;;
        clean)
            case "${_orchestrator}" in
                docker)
                    echo
                    echo "You are about to clean all the ping_devops images below..."
                    echo
                    docker container ls -a --filter name=${_docker_compose_project_name}_*
                    echo
                    echo_red "IMPORTANT: This is destructive of all content in these running containers.
        "

                    echo "Are you SURE you want to clean these ping_devops images (y/n) [n] ? \c"
                    read -r answer

                    if [ "${answer}" != "Y" ] && [ "${answer}" != "y" ]; then
                        echo_error "Clean Aborted!"
                        exit
                    fi

                    # shellcheck disable=SC2045
                    for _prod_option in $(ls -d "${DEVOPS_WORK_DIR}/*" 2>/dev/null); do
                        test -d "${_prod_option}" || break

                        _docker_compose_dir="${DEVOPS_WORK_DIR}/$(basename "${_prod_option}" )"
                        _docker_compose_options="--file ${_docker_compose_dir}/docker-compose.yaml --project-name ${_docker_compose_project_name}"

                        echo "Cleaning up ${_prod_option}"
                        run_command "${DOCKER_COMPOSE} ${_docker_compose_options} down "

                        rm -rf "${_docker_compose_dir}"
                    done
                    run_command "${DOCKER} container prune -f"
                    ;;
                kubernetes)
                    echo
                    echo "You are about to clean all the kubernetes resources below..."
                    echo
                    echo "################################################################################"
                    echo "#    Kubernetes Context: ${GREEN}${CURRENT_K8S_CONTEXT}${NORMAL}"
                    echo "#  Kubernetes Namespace: ${GREEN}${CURRENT_K8S_NAMESPACE}${NORMAL}"
                    echo "################################################################################"
                    kubectl get all
                    echo
                    echo_red "IMPORTANT: This is destructive of all content in these running containers.
        "

                    echo "Are you SURE you want to clean these kubernetes resources (y/n) [n] ? \c"
                    read -r answer

                    if [ "${answer}" != "Y" ] && [ "${answer}" != "y" ]; then
                        echo_error "Clean Aborted!"
                        exit
                    else
                        run_command "kubectl delete pods,statefulsets,deployments,services -n ${CURRENT_K8S_NAMESPACE} --grace-period=0 --force --all"
                    fi

                    echo
                    echo "################################################################################"
                    echo "#    All pods, statefulsets, deployments and services have been deleted."
                    echo "#    To perform a deep clean on all other kubernetes in your workspace use"
                    echo "#    following alias:"
                    echo "# "
                    echo "#    knuke"
                    echo "################################################################################"
                    
                    ;;
            esac
            ;;
        *)
            usage_command "${_orchestrator}" "Unknown ${_orchestrator} command"
            ;;
    esac
    
}

################################################################################
################################################################################
devops_config()
{

    ################################################################################
    # Get all the custom variables from the devops file before we backup
    ################################################################################
    _custom_variables=$(get_custom_variables)

    ################################################################################
    # Check for existance of the devops file and backup to .prev
    ################################################################################
    if test -f "${DEVOPS_FILE}"; then
        mv "${DEVOPS_FILE}" "${DEVOPS_FILE}".prev

        # If the config is broken (i.e. ctrl-c) then restore the previous file
        trap '
            echo
            echo "restoring: ${DEVOPS_FILE}"
            mv "${DEVOPS_FILE}".prev "${DEVOPS_FILE}"
            exit
        ' HUP INT PIPE TERM 
    fi

    echo "

################################################################################
#
#                     Welcome to Ping Identity DevOps!
#
#  We will run through a few config items to make your experiance as easy as 
#  possible.  These include:
#  
#    - Setting up your default '${PRINT_DEVOPS_FILE}' settings
#    - Adding bash_profile.ping-devops to your .bash_profile, if neeeded
#"

    echo "################################################################################
#              Ping Identity DevOps Docker Variables
################################################################################
# Variables used to assist docker tools and .yaml files during docker 
# container startups.
################################################################################
" | tee -a "${DEVOPS_FILE}"

    print_variable_setting_instructions

    devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_ACCEPT_EULA"               "NO" "Do you accept the terms of license (found here: https://www.pingidentity.com/en/legal/subscription-agreement.html) with Ping Identity? (YES/NO)"
    devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_USER"               ""                        "Ping Identity DevOps User (request here: https://bit.ly/ping-devops-request)"
    devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_KEY"                ""                        "Ping Identity DevOps Key"
    devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_HOME"               "${HOME}/projects/devops" "Location of Ping Identity DevOps repos and tools"
    devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_REGISTRY"           "docker.io/pingidentity"  "Ping Identity DevOps Registry (recommend default: docker.io/pingidentity)"
    devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_TAG"                "edge"                    "Ping Identity DevOps Tag (recommend default: edge)"

    echo "
################################################################################
#              Ping Identity DevOps Customized Variables
################################################################################
# Additional variables that you would like to send to containers via 
# docker-compose.yaml and kubernetes .yaml files.
#
# Examples include:
#     PING_CONTAINER_PRIVILEGED=false
#     PING_CONTAINER_UID=12345
#     PING_CONTAINER_GID=9876
#     LDAP_PORT=1389
#     LDAPS_PORT=1636
#     HTTPS_PORT=1443
#     JMX_PORT=1689
#     PING_IDENTITY_PASSWORD=2FederateM0re
#
# These are often set to nothing, unless you are using advanced features
################################################################################
" | tee -a "${DEVOPS_FILE}"

    devops_add_config_custom "${DEVOPS_FILE}" "${_custom_variables}"   

    add_bash_aliases

    echo "

################################################################################
#
#  To run some sample Docker images, get more details with:
#
#    ping-devops docker
#
################################################################################
    "
}

########################################################################################################################
# base64-encode the provided string or file contents and remove any new lines (both line feeds and carriage returns).
#
# Arguments
#   ${1} -> The string to base-64 encode, or a file whose contents to base64-encode.
########################################################################################################################
base64_no_newlines() 
{
  if test -f "${1}"; then
    # shellcheck disable=SC2002
    cat "${1}" | $BASE64 | tr -d '\r?\n'
  else
    echo "${1}" | $BASE64 | tr -d '\r?\n'
  fi
}

################################################################################
# main
################################################################################

#test -z "${1}" && usage

_ping_devops_command="${1}" && shift $(( $# > 0 ? 1 : 0 ))

test -z "${_ping_devops_command}" && usage
test "${_ping_devops_command}" = "k8s" && _ping_devops_command="kubernetes"

case "${_ping_devops_command}" in
    config)
        devops_config
        ;;

    topic|topics)
        print_topic "${1}"
        ;;

    generate)
        _resource="${1}"
        _params="${*}"

        generate_resource "${_resource}" "${_params}"
        ;;

    docker|kubernetes)
        _orch_cmd="${1}"
        _product="${2}"
        _params="${*}"

        test -z "${_orch_cmd}" && usage_command "${_ping_devops_command}"

        case "${_orch_cmd}" in
            info|start|stop|rm|clean)
                orchestration_command "${_ping_devops_command}" "${_orch_cmd}" "${_product}" "${_params}"
                ;;
            *) 
                usage_command "${_ping_devops_command}" "Unknown ${_ping_devops_command} command '${_orch_cmd}'"
        esac
        ;;

    info)
        _params="${*}"

        ping_devops_info "${_params}"
        ;;
    version)
        _params="${*}"

        ping_devops_version "${_params}"
        ;;
    *)
        usage "Unknown ping-devops command '${_ping_devops_command}'"
        ;;
esac


