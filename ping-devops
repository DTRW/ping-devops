#!/bin/bash
########################################################################################################################
#
# This script is used to manage a Ping Identity DevOps environment for Docker, Docerk Compose and Kubernetes.
#
# ------------
# Installation
# ------------
#   brew install ping-devops
#   brew upgrade ping-devops
#
# ------------
# Requirements
# ------------
# The script requires the following tools to be installed:
#   - openssl
#   - base64
#   - kustomize
#   - kubectl
#   - envsubst
#   - docker
#
# In addition, the assumption is that kubectl is configured to authenticate and apply manifests to the Kubernetes
# cluster. For EKS clusters, this requires an AWS key and secret with the appropriate IAM policies to be configured and
# requires that the aws CLI tool and probably the aws-iam-authenticator CLI tool are installed.
#
# ----------------------------------------------------------------------------------------------------------------------
# Variable                      | Purpose
# ----------------------------------------------------------------------------------------------------------------------
# PING_IDENTITY_DEVOPS_USER     | A user's email address who has registered with PingIdentity.com and accepted the 
#                               | EULA and Devlopers program.  To be used to obtain evaluation Ping Identity product
#                               | licenses.
#                               |
# PING_IDENTITY_DEVOPS_KEY      | A key associated with the user's account
#                               |
# PING_IDENTITY_DEVOPS_HOME     | Location of Ping Identity DevOps Tools.  Default: ${HOME}/project/devops
#                               |
# PING_IDENTITY_DEVOPS_REGISTRY | Default Docker Registry used with DevOps Tools. Default: docker.io/pingidentity
#                               |
# PING_IDENTITY_DEVOPS_TAG      | Default Docker Image Tag used with DevOps Tools. Default: edge
#                               |
# PING_IDENTITY_DEVOPS_DNS_ZONE | DNS Zone used when deploying Kubernetes Ingresses for hostnames
#                               |
# PING_IDENTITY_DEVOPS_REGION   | DevOps Cloud location used when deploying Kubernetes resources.  Examples include:
#                               |   - AWS: us-west-1
#                               |
# PING_IDENTITY_K8S_CLUSTER_NAME| Kubernetes Cluster Name used with DevOps Tools.
#                               |
# PING_IDENTITY_K8S_NAMESPACE   | Kubernetes Namespace used with DevOps Tools.
#                               |
#                               |
########################################################################################################################

CWD=`pwd` 
cd "$( dirname "${0}" )"
THIS="$( basename "${0}" )"
THIS_DIR=`pwd`

################################################################################
# Utilities used
################################################################################
BASE64="base64"
OPENSSL="openssl"
KUSTOMIZE="kustomize"
KUBECTL="kubectl"
ENVSUBST="envsubst"
DOCKER="docker"

################################################################################
# Ping Identity tools & config information
################################################################################
DOT_PINGIDENTITY="${HOME}/.pingidentity"
DEVOPS_FILE="${DOT_PINGIDENTITY}/devops"
PRINT_DEVOPS_FILE="~/.pingidentity/devops"

################################################################################
# Check for a .pingidentity directory with propertyfile
################################################################################
test -d "${DOT_PINGIDENTITY}" || mkdir -p "${DOT_PINGIDENTITY}"

################################################################################
# Source devops file
################################################################################
test -f "${DEVOPS_FILE}" && source "${DEVOPS_FILE}"

# Temporary directories used to run generate-profile and download product
PROFILE_DIR=""
PROD_DIR=""

################################################################################
# cleanup - Ensures that we cleanup any temporary directories we create upon exit
################################################################################
function cleanup {      
  rm -rf "$PROFILE_DIR"   
  rm -rf "$PROD_DIR"
}

trap cleanup EXIT

################################################################################
# Terminal codes for echoing of RED or GREEN colors, and back to NORMAL
################################################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
NORMAL='\033[0m'

################################################################################
# echo_red - Echo message in red color
################################################################################
echo_red()
{
    echo -e "${RED}$*${NORMAL}"
}

################################################################################
# echo_green - Echo message in green color
################################################################################
echo_green()
{
    echo -e "${GREEN}$*${NORMAL}"
}

################################################################################
# echo_error (message) - Echo's an Error: message
################################################################################
echo_error()
{
    if test  ! -z "$*"; then
      echo "-------------------------------------------------------------------------"
	    echo_red "Error: ${1}"
      echo "-------------------------------------------------------------------------"
    fi
}

################################################################################
# uage - Print any message sent as an error and then the usage information
################################################################################
function usage()
{
  echo_error "$*"
cat <<EO_USAGE

################################################################################
#  Ping Identity DevOps
#
#  Documentaion: https://pingidentity-devops.gitbook.io/devops/
#
#  GitHub Repos: https://github.com/pingidentity/pingidentity-devops-getting-started
#                https://github.com/pingidentity/pingidentity-server-profiles
#
################################################################################

Usage:
  ping-devops config                          # Configure Ping DevOps configuration
  ping-devops info                            # Current Ping DevOps configuration

Generate Kubernetes/Kustomize Resource:
  ping-devops generate devops-secret                    # Ping DevOps secret
  ping-devops generate tls-secret <domain>              # TLS Cert/Key (i.e. example.com)
  ping-devops generate ssh-id-secret <ssh id_rsa file>  # SSH ID Key (i.e. ~/.ssh/id_rsa)
  ping-devops generate license-secret <license file>    # License file (i.e. pingdirectory.lic)
  ping-devops generate kustomization.yaml               # Skeleton kustomization.yaml

Generate Ping Identity Server Profile:
  ping-devops generate-profile <product>       # Generates a server-profile for product
    --current-install    /path/to/current-inst # Default: create an empty profile template)
    --generated-profile  /path/to/gen-profile  # Default: current directory with product name)

Examples:
  ping-devops examples 

Further help:
  ping-devops commands
  ping-devops help [COMMAND]
  https://github.com/pingidentity/ping-devops
EO_USAGE

  exit
}

################################################################################
# check_for_tool (tool_name)
#
# Using which command, validate that the tool_name is found
################################################################################
check_for_tool()
{
  _tool="${1}"
  which ${_tool} >/dev/null

  test $? -eq 1 && usage "${_tool} tool not found, please install"
}

################################################################################
# get_value (variable)
#
# Get the value of a vaiable, preserving the spaces
################################################################################
get_value ()
{
  if test ! -z "${1}"; then
    IFS="%%"
    eval printf '%s' "\${${1}}"
    unset IFS
  fi
}

################################################################################
# get_value (variable)
#
# Get the value of a vaiable, preserving the spaces
################################################################################
find_setup_arg_value()
{
  _valToFind="${1}"
  _findFile="${2}"
  _defaultVal="${3}"
  
  _valFound=$(grep -e "$_valToFind" ${_findFile} | sed "s/.*$_valToFind \(.*\) .*\\\\$/\1/g")

  test -z "${_valFound}" && _valFound="${_defaultVal}"

  echo "${_valFound}"
}

################################################################################
# add_bash_aliases ()
#
# Ensure that the bash_alias file is a part of .bash_profile
################################################################################
add_bash_aliases()
{

    echo "
################################################################################
#                         Ping Identity DevOps Alias Files
################################################################################"

    PING_DEVOPS_BASH_PROFILE="/usr/local/etc/bash_profile.ping-devops"
    BASH_PROFILE="${HOME}/.bash_profile"

    # Touch the .bash_profile incase it's not setup yet
    touch "${BASH_PROFILE}"

    grep "${PING_DEVOPS_BASH_PROFILE}" "${BASH_PROFILE}" > /dev/null

    if test "${?}" == "1"; then
        echo "Let's add helper alias' and functions to your shell.  
We are assuming you use bash and will add these to your ${BASH_PROFILE}
"

        echo -n "  OK if we add a 'source ${PING_DEVOPS_BASH_PROFILE}' command to your ${BASH_PROFILE} (y/n) [y] ? "
        read answer

        if [ "${answer}" == "" ] || [ "${answer}" == "Y" ] || [ "${answer}" == "y" ]; then
            echo "
# Ping Identity DevOps Aliases - Added with 'ping-devops config' on `date`
test -f '${PING_DEVOPS_BASH_PROFILE}' && source '${PING_DEVOPS_BASH_PROFILE}'" >> "${BASH_PROFILE}"
        fi
    else
        echo_green "  Great! You already have '${PING_DEVOPS_BASH_PROFILE}' in your ${BASH_PROFILE}"
    fi

    grep "sourcePingIdentityFiles" "${BASH_PROFILE}" >/dev/null

    if test "$?" = "1"; then
        echo -n "  OK if we add a 'sourcePingIdentityFiles' command to your ${BASH_PROFILE} (y/n) [y] ? "
        read answer
        if [ "${answer}" == "" ] || [ "${answer}" == "Y" ] || [ "${answer}" == "y" ]; then
            echo "
# Source PingIdentity Files Alias - Added with 'ping-devops config' on `date`
sourcePingIdentityFiles" >> "${BASH_PROFILE}"
        fi
    else
        echo_green "  Great! You already have 'sourcePingIdentityFiles' in your ${BASH_PROFILE}"
    fi
}

################################################################################
# devops_add_config (file, variable, default, prompt)
#
# Add a config variale to the devops file, using the prompt sent, and defaulting
# if no value is provided.
################################################################################
function devops_add_config()
{
  PROPS_FILE="${1}" && shift
  VAR_TO_SET="${1}" && shift
  VAR_DEFAULT="${1}" && shift
  VAR_PROMPT="${*}"

  CURRENT_VALUE=$(get_value ${VAR_TO_SET})
  test -z "${CURRENT_VALUE}" && CURRENT_VALUE="${VAR_DEFAULT}"

  echo -n "${VAR_PROMPT} [${CURRENT_VALUE}] ? "
  read answer
  if test ! -z "${answer}"; then
    if test "${answer}" = "-"; then
      if test -z "${VAR_TO_SET}"; then
        echo -n "" >> ${PROPS_FILE}
      else
        eval "unset \${VAR_TO_SET}"
        echo "${VAR_TO_SET}=" >> ${PROPS_FILE}
      fi
    else
      if test -z "${VAR_TO_SET}"; then
        echo -n "${answer}" >> ${PROPS_FILE}
      else
        eval "export \${VAR_TO_SET}=${answer}"
        echo "${VAR_TO_SET}=${answer}" >> ${PROPS_FILE}
      fi
    fi
  else
    if test -z "${VAR_TO_SET}"; then
        echo -n "${CURRENT_VALUE}" >> ${PROPS_FILE}
    else
        echo "${VAR_TO_SET}=${CURRENT_VALUE}" >> ${PROPS_FILE}
    fi
  fi
}

################################################################################
# devops_add_comment (file, comment)
#
# Add a comment to the devops file
################################################################################
function devops_add_comment()
{
  _TFILE="${1}" && shift
  _MSG="${@}"

  echo ${_MSG}
  echo ${_MSG} >> ${_TFILE}
}

################################################################################
# devops_setup ()
#
# Performs the interactive steps of the configuration
################################################################################
function devops_setup()
{
  echo "
################################################################################
#                         Ping Identity Property Files
################################################################################
This will create Ping Identity DevOps Property file (${DEVOPS_FILE})
and they will be used as environment variables for scripts, .yamls, etc...
################################################################################
"

  echo "
################################################################################
# Ping Identity DevOps Docker Variables
################################################################################
# Variables used to assist docker tools and .yaml files during docker 
# container startups.
################################################################################
" | tee -a ${DEVOPS_FILE}

  devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_ACCEPT_EULA"               "NO" "Do you accept the terms of license (found here: https://www.pingidentity.com/en/legal/subscription-agreement.html) with Ping Identity? (YES/NO)"
  devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_USER"               ""                        "Ping Identity DevOps User"
  devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_KEY"                ""                        "Ping Identity DevOps Key"
  devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_HOME"               "${HOME}/projects/devops" "Location of Ping Identity DevOps repos and tools"
  devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_REGISTRY"           "docker.io/pingidentity"  "Ping Identity DevOps Registry"
  devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_TAG"                "edge"                    "Ping Identity DevOps Tag (i.e. edge, 1906)"

  echo "
################################################################################
# Ping Identity DevOps Kubernetes Variables
################################################################################
# Variables used to assist kubernetes tools and .yaml files during kubernetes
# deployments
#
# These can be set to nothing if Kubernetes deployements or tools are used.
################################################################################
" | tee -a ${DEVOPS_FILE}

  devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_DNS_ZONE"           "" "DNS Zone used with Kubernetes Ingresses"
  devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_DEVOPS_REGION"             "" "Cloud Region used for Kubernetes (i.e. us-east-2"
  devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_K8S_CLUSTER_NAME"          "" "Kubernetes Cluster Name used"
  devops_add_config "${DEVOPS_FILE}" "PING_IDENTITY_K8S_NAMESPACE"             "" "Kubernetes Namespace used"

  add_bash_aliases
}


################################################################################
# ping_devops_info ()
#
# Prints all the variables of the ~/.pingidentity/devops file
################################################################################
ping_devops_info()
{
    echo "
################################################################################
#             Ping Identity DevOps Information
#             Sourced from ${PRINT_DEVOPS_FILE}
################################################################################
#         PING_IDENTITY_DEVOPS_USER : ${PING_IDENTITY_DEVOPS_USER}
#          PING_IDENTITY_DEVOPS_KEY : ${PING_IDENTITY_DEVOPS_KEY}
#
#         PING_IDENTITY_DEVOPS_HOME : ${PING_IDENTITY_DEVOPS_HOME}
#     PING_IDENTITY_DEVOPS_REGISTRY : ${PING_IDENTITY_DEVOPS_REGISTRY}
#          PING_IDENTITY_DEVOPS_TAG : ${PING_IDENTITY_DEVOPS_TAG}
#
#     PING_IDENTITY_DEVOPS_DNS_ZONE : ${PING_IDENTITY_DEVOPS_DNS_ZONE}
#       PING_IDENTITY_DEVOPS_REGION : ${PING_IDENTITY_DEVOPS_REGION}
#
#    PING_IDENTITY_K8S_CLUSTER_NAME : ${PING_IDENTITY_K8S_CLUSTER_NAME}
#       PING_IDENTITY_K8S_NAMESPACE : ${PING_IDENTITY_K8S_NAMESPACE}
################################################################################
 To configure, run:
    ping-devops config
"
}

################################################################################
# print_examples
#
# Prints out examples
################################################################################
print_examples()
{
    _EXAMPLE="${1}"

    test -z "${_EXAMPLE}" || test "${_EXAMPLE}" == "docker" && echo "
################################################################################
#   Docker Examples
################################################################################
 To use with 'docker run command'
     docker run
        ...
        --env-file ${PRINT_DEVOPS_FILE}
        ...

 To use with '.yaml' file (use snippet below)
     pingdirectory:
       env_file:
         - ${HOME}/.pingidentity/devops
"

}

################################################################################
################################################################################
function generate_resource()
{
    _secret="${1}"

    case "${1}" in
        devops-secret)
            check_for_tool $BASE64
            _devopsUser=$(base64_no_newlines "${PING_IDENTITY_DEVOPS_USER}")
            _devopsKey=$(base64_no_newlines "${PING_IDENTITY_DEVOPS_KEY}")
            echo "
apiVersion: v1
kind: Secret
metadata:
  name: devops-secret
type: Opaque
data:
  PING_IDENTITY_DEVOPS_USER: ${_devopsUser}
  PING_IDENTITY_DEVOPS_KEY: ${_devopsKey}
"
            ;;

        tls-secret)
            _domain="${2}"
            test -z "${_domain}" && usage
            CERTS_DIR=$(mktemp -d)
            cd "${CERTS_DIR}"
            DOMAIN="ping-devops.com"

            check_for_tool $OPENSSL
            check_for_tool $BASE64
            $OPENSSL req -x509 -nodes -newkey rsa:2048 -days 3650 -sha256 \
              -out tls.crt -keyout tls.key \
              -subj "/CN=${DOMAIN}" \
              -reqexts SAN -extensions SAN \
              -config <(cat /etc/ssl/openssl.cnf; printf "[SAN]\nsubjectAltName=DNS:*.${DOMAIN}") > /dev/null 2>&1

            _tlsCRT="$(base64_no_newlines tls.crt)"
            _tlsKEY="$(base64_no_newlines tls.key)"
            echo "
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: tls-secret
data:
  tls.crt: ${_tlsCRT}
  tls.key: ${_tlsKEY}"

            cd - > /dev/null
            rm -rf "${CERTS_DIR}"

            ;;
        ssh-id-secret)
            _idKey="${2}"

            echo "
apiVersion: v1
kind: Secret
metadata:
  name: ssh-id-key-secret
data:
  id_rsa: |
    $(base64_no_newlines ${_idKey})"
            ;;
        license-secret)
            generate_license_secret "${2}"
            ;;

        kustomization|kustomization.yaml)
            cd ${CWD}
            echo "Generating a kustomization.yaml for current directory"
            if test -f ./kustomization.yaml; then
                echo_red "ERROR: kustomization.yaml already exists"
            fi

            cat <<EOK >kustomization.yaml
kind: Kustomization
apiVersion: kustomize.config.k8s.io/v1beta1

resources:
EOK
            for f in */; do
              echo "- ${f%/}" >> kustomization.yaml
            done

            for f in *.yaml; do
              test "${f}" != "kustomization.yaml" && echo "- ${f%}" >> kustomization.yaml
            done
            ;;
        *)
            usage "Unknown generage resource '${1}'"
            ;;
    esac
} 

################################################################################
# generate_license_secret (name of product or license file)
#
# Generates a license secret for the passed license file or name of product
#  - license_file or product_name
################################################################################
function generate_license_secret()
{
  _licenseArg="${1}"

  if test -f ${_licenseArg}; then
    _licenseSecret=$(base64_no_newlines ${_licenseArg})
  else

    case "${_licenseArg}" in
      pingaccess|pingcentral|pingdatametrics|pingdatasync|pingdatagovernance|pingdatagovernancepap|pingdirectory|pingdirectoryproxy|pingfederate)
         
        check_for_tool $DOCKER

        $DOCKER run --rm -v /tmp:/tmp ${PING_IDENTITY_DEVOPS_REGISTRY}/pingdownloader \
          --product ${_licenseArg} \
          --license \
          --devops-user "${PING_IDENTITY_DEVOPS_USER}" \
          --devops-key "${PING_IDENTITY_DEVOPS_KEY}" \
          --devops-app "pingdevops-${_licenseArg}" | grep "^\#"
        _dockerRunResult=$?

        test $_dockerRunResult -ne 0 && usage "Unable to pull eval license (result=$_dockerRunResult)" 
      
        _licenseSecret=$(base64_no_newlines /tmp/product.lic)

        rm /tmp/product.lic
        ;;
      *)
        usage "License File '${_licenseArg}' not found"
        ;;
    esac
  fi
            echo "
apiVersion: v1
kind: Secret
metadata:
  name: license-secret
data:
  license: |
    ${_licenseSecret}"

}

################################################################################
# generate_profile (arguments)
#
# Generates a profile for the provided arguments:
#  - product
#  - current-install {directory}     (optional)
#  - generated-profile {directory}   (optional)
#  - variables-file {file}           (optional)
################################################################################
function generate_profile()
{
    _product="${1}"
    shift
    while ! test -z "${1}" ; do
        case "${1}" in
            --current-install)
                shift
                _currentInstall="${1}"
                ;;
            --generated-profile)
                shift
                _generatedProfile="${1}"
                ;;
            --variables-file)
                shift
                _variablesFile="${1}"
                usage "--variables-file option not implemented yet"
                ;;
            *)
                usage "Unknown generage-profile option '${1}'"
                ;;
        esac
        shift
    done

    test -z "${_generatedProfile}" && _generatedProfile="${CWD}/${_product}"
    
    test -d "${_generatedProfile}" && 
        usage "Generated Profile directory '${_generatedProfile}' not empty" 

    echo "
################################################################################
#   Ping DevOps Server Profile Generation
################################################################################
"

    PROFILE_DIR=`mktemp -d`
    if [[ ! "$PROFILE_DIR" || ! -d "$PROFILE_DIR" ]]; then
      usage "Could not create temp dir using mktemp."
    fi

    PROD_DIR=`mktemp -d`
    if [[ ! "$PROD_DIR" || ! -d "$PROD_DIR" ]]; then
      usage "Could not create raw dir using mktemp." 
    fi

    if test -z "${_currentInstall}" ; then
      echo "No current install provided."
      echo "  ==> Using 'docker run ${PING_IDENTITY_DEVOPS_REGISTRY}/pingdownloader -p ${_product}"
      echo "  ==> to pull down the latest bits for ${_product}"

      check_for_tool $DOCKER
      $DOCKER run --rm -v /tmp:/tmp ${PING_IDENTITY_DEVOPS_REGISTRY}/pingdownloader \
          --product ${_product} \
          --devops-user "${PING_IDENTITY_DEVOPS_USER}" \
          --devops-key "${PING_IDENTITY_DEVOPS_KEY}" \
          --devops-app "ping-devops-generate-profile-${_product}"
      _dockerRunResult=$?

      test $_dockerRunResult -ne 0 && usage "Unable to download product via docker (result=$_dockerRunResult)" 
      
      unzip -q /tmp/product.zip -d ${PROD_DIR}
      
      _currentInstall="${PROD_DIR}/PingDirectory"

      rm /tmp/product.zip
    fi
    
    test ! -d "${_currentInstall}" && 
        usage "Current Install '${_currentInstall}' not found" 

    case "${_product}" in
        pingdirectory)
            generate_server_profile_pingdirectory "${_src}"
            ;;
        pingaccess|pingdatagovernance|pingdatasync|pingfederate)
            usage "Not implemented for product '${_product}'."
            ;;
        *)
            usage "Unknown product '${_product}'."
            ;;
    esac
} 

################################################################################
# generate_server_profile_pingdirectory ()
#
# Generates a server profile for Ping Directory
################################################################################
generate_server_profile_pingdirectory()
{
    _serverRoot="${_currentInstall}"

    # Validate that we have an actual PingDirectory install with the manage-profile
    # binary
    test ! -x ${_serverRoot}/bin/manage-profile && \
        usage "Unable to find manage-profile in product."

    cd ${PROFILE_DIR}

    # Create a directory to generate a profile into
    mkdir pd.profile
    ${_serverRoot}/bin/manage-profile generate-profile --profileRoot pd.profile >/dev/null


    # Create a secrets directory where we will place some password files.
    mkdir secrets
    echo "What initial passwords would you like to set in your generated profile for the:"
    echo "   ROOT_USER      - Password used for your root dn (i.e cn=administrator)"
    echo "   ADMIN_USER     - Password used with your administrative framework (i.e. dsreplication)"
    echo "   ENCRYPTION     - Password used to encrypt your encryption settings"
    echo ""
    echo "These will be placed into seperate password files and referenced in an env_vars file at the"
    echo "top of your generated profile.  For better security, these should be placed into a secret"
    echo "or vault, mounted into your container and refrenced by your env_vars location."
    echo ""

    _randomPassword="$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-zA-Z0-9@%^_+?~' | fold -w 12 | head -c 12)"
    devops_add_config "secrets/root-user-pwd"  "" "$_randomPassword" "Initial ROOT_USER_PASSWORD? "
    devops_add_config "secrets/admin-user-pwd" "" "$_randomPassword" "Initial ADMIN_USER_PASSWORD? "
    devops_add_config "secrets/encryption-pwd" "" "$_randomPassword" "Initial ENCRYPTION_PASSWORD? "

    #
    # env_vars File
    #
    # Pull several arguments in the generated setup-arguments.txt file create the proper
    # environment variables
    _setupArgs="pd.profile/setup-arguments.txt"
    echo "
# Generated by 
#    ping-devops generate-profile pingdirectory
#
# on $(date)
#
# The following environment variables are used by the
# Ping Identity Ping Directory image.
#
ROOT_USER_PASSWORD_FILE=\${STAGING_DIR}/secrets/root-user-pwd
ADMIN_USER_PASSWORD_FILE=\${STAGING_DIR}/secrets/admin-user-pwd
ENCRYPTION_PASSWORD_FILE=\${STAGING_DIR}/secrets/encryption-pwd

ROOT_USER_DN=$(find_setup_arg_value  "--rootUserDN"  ${_setupArgs}  "cn=administrator")
USER_BASE_DN=$(find_setup_arg_value  "--baseDN"      ${_setupArgs}  "dc=example,dc=com")
LDAP_PORT=$(find_setup_arg_value     "--ldapPort"    ${_setupArgs}  "389")
LDAPS_PORT=$(find_setup_arg_value    "--ldapsPort"   ${_setupArgs}  "636")
HTTPS_PORT=$(find_setup_arg_value    "--httpsPort"   ${_setupArgs}  "443")
MAX_HEAP_SIZE=$(find_setup_arg_value "--maxHeapSize" ${_setupArgs}  "384m")
LOCATION=$(find_setup_arg_value      "--location"    ${_setupArgs}  "home")

" > env_vars

    mv pd.profile/setup-arguments.txt setup-arguments.txt-FROM-SOURCE

    #
    # docker-compose.yaml File
    #
    echo "
# Ping Identity ping-devops generate-profile
#
# Generated on $(date)
#
version: \"3.1\"
# This docker-compose.yaml was generated by 'ping-devops' tool on $(date)

services:
  pingdirectory:
    image: \${PING_IDENTITY_DEVOPS_REGISTRY}/pingdirectory:\${PING_IDENTITY_DEVOPS_TAG}
    container_name: pingdirectory
    environment:
      #- SERVER_PROFILE_URL=...url of your git repo...and comment out the volumes /opt/in...
      #- SERVER_PROFILE_PATH=...path in your git repo...
      - PING_IDENTITY_ACCEPT_EULA=YES
      - ORCHESTRATION_TYPE=compose
      - COMPOSE_SERVICE_NAME=pingdirectory_service
    env_file:
      # Configuration file created when setup.sh (Getting-started project root directory) is first run to source
      # devops user/key details for evaluation licenses and for docker image/git tags
      - ${PRINT_DEVOPS_FILE}
    # Example: Examples below for mounting local directories for inbound server profile and persisting
    #          server build.  The local /opt/out directory must be empty when building new server
    #             /opt/out - Resulting server build
    #             /opt/in  - Inbound server-profile detail in liue of SERVER_PROFILE_URL (must be commented out)
    volumes:
    #   - \${HOME}/projects/devops/volumes/pingdirectory_service:/opt/out
       - ${_generatedProfile}:/opt/in
    networks:
      - pingnet
    ulimits:
      nproc:
        soft: 16384
        hard: 16384
      nofile:
        soft: 65535
        hard: 65535
    ports:
      - 1389-1399:389
      - 1636-1646:636
      - 1443-1453:443
      
  pingdataconsole:
    image: \${PING_IDENTITY_DEVOPS_REGISTRY}/pingdataconsole:\${PING_IDENTITY_DEVOPS_TAG}
    container_name: pingdataconsole
    ports:
      - 8443:8443
    networks: 
      - pingnet
                    
networks:
    pingnet:

" > docker-compose.yaml

    #
    # README.md File
    #
    echo "
# Ping Directory Server Profile

Generated by \`ping-devops\` tool on $(date)
* Product: ${_product}
* Current Install: ${_currentInstall}
* Generated Profile: ${_generatedProfile}

# Testing with docker-compose
## Starting up image

    cd ${_generatedProfile}
    docker-compose up -d

## Watching PingDirectory Logs

    docker logs -f ${_product}

## Running PingDataconsole

https://localhost:8443
  Username: administrator
  Password: $(cat ${PROFILE_DIR}/secrets/root-user-pwd)

" > README.md

    #
    # motd File
    #
    echo "
This server profile was generated by 'ping-devops' tool on $(date)

Source Product
==============
$(${_serverRoot}/bin/status -V)
" > motd

    mkdir -p "${_generatedProfile}"

    mv * ${_generatedProfile}/.

    echo
    echo "######################## README.md ############################"
    
    which mdcat >/dev/null
    _whichResult=$?

    if test $_whichResult -eq 0; then
      mdcat ${_generatedProfile}/README.md
    else
      cat ${_generatedProfile}/README.md
    fi
}

################################################################################
################################################################################
generate_server_profile_pingfederate()
{
    _serverRoot="${_currentInstall}"

    # Validate that we have an actual Pingfederate install with a bin/run.sh
    # script
    test ! -x ${_serverRoot}/bin/run.sh && \
        usage "Unable to find 'bin/run.sh' in '${_serverRoot}'."

    cd ${_currentInstall}

    SRC_FILES=/tmp/pf.sourcefiles
    find . -print > ${SRC_FILES}

    cd ${PROFILE_DIR}
    _secretsDir="${PROFILE_DIR}/secrets"   && mkdir -p ${_secretsDir}
    _profileDir="${PROFILE_DIR}/pf.profile"   && mkdir -p ${_profileDir}
    _instanceDir="${_profileDir}/instance" && mkdir -p ${_instanceDir}


    # 
    # For every file in the current installation, look for any files that:
    #  - we should ignore (i.e. ./log*, ./lib*, ...)
    #  - if there is pid file, simply provide a message alerting this fact
    #  - JWK file.  provide a message and copy it to our secrets folder for now.
    #  - everything else, see if there is a difference, or if it is a new file and copy it.
    while read f; do
      case $f in
        # IGNORE THESE FILES   
        (./connection_export_examples*|./legal*|./lib*|./log*|./modules*|./sbin/*|./server/default/tmp*|./server/default/data/archive*|./server/default/data/instance*|./server/default/lib*|./sdk*|./upgrade*|./work*) 
          ;;
        # Provide a message that the server may be running  
        (*.pid)
          echo "Seems to be running - $f"
          ;;
        # Place this file in the secrets directory
        (*.jwk)
          cp ${_currentInstall}/$f ${_secretsDir}/$(basename $f)
          echo "Got a .jwk!!! - $f"
              #  mkdir -p ${_instanceDir}/$(dirname $f) 
              #  cp ${_currentInstall}/$f ${_instanceDir}/$f 
          ;;
        # Everything else, 
        # if directory, just ignore
        # If a file isn't found in PRODUCT dir, we need to make the directory and copy.
        # test to see if difference and copy if new or different.
        *)
          test -d ${_currentInstall}/$f && continue
          test ! -f /ping/pingfederate-10.0.0/pingfederate/$f && mkdir -p ${_instanceDir}/$(dirname $f) && cp ${_currentInstall}/$f ${_instanceDir}/$f && continue

          diff ${_currentInstall}/$f /ping/pingfederate-10.0.0/pingfederate/$f >/dev/null 2>/dev/null
          _diffResult=$?
          
          case $_diffResult in
            0)
               echo "NO DIFFERENCE - $f" 
               ;;
            1|2)
               mkdir -p ${_instanceDir}/$(dirname $f) 
               cp ${_currentInstall}/$f ${_instanceDir}/$f 
               ;;
          esac
          ;;
      esac
    done <${SRC_FILES}

    tree ${PROFILE_DIR}

    echo "

This server profile was generated by 'ping-devops' tool.

Source Product
==============
TODO GET PF VERSION INFO
" > motd

    mkdir -p "${_generatedProfile}"

    mv * ${_generatedProfile}/.
}


################################################################################
################################################################################
generate_server_profile_pingaccess()
{
    _serverRoot="${_currentInstall}"

    test ! -x ${_serverRoot}/??? && \
        usage "Unable to find ??? in product."

    cd ${PROFILE_DIR}

    mkdir instance
    
    echo "

This server profile was generated by 'ping-devops' tool.

Source Product
==============
TODO GET PA VERSION INFO
" > motd

    mkdir -p "${_generatedProfile}"

    mv * ${_generatedProfile}/.
}

################################################################################
################################################################################
function devops_config()
{
    ################################################################################
    # Check for existance of the devops file and backup to .prev
    ################################################################################
    if test -f "${DEVOPS_FILE}"; then
        mv "${DEVOPS_FILE}" "${DEVOPS_FILE}".prev

        # If the config is broken (i.e. ctrl-c) then restore the previous file
        trap '
            echo ""
            echo "restoring: ${DEVOPS_FILE}"
            mv "${DEVOPS_FILE}".prev "${DEVOPS_FILE}"
            exit
        ' HUP INT PIPE TERM 
    fi

    echo "

################################################################################

                     Welcome to Ping Identity DevOps!

  We will run through a few config items to make your experiance as easy as 
  possible.  These include:
  
    - Setting up your default .pingidentity/devops settings
    - Adding bash_profile.ping-devops to your .bash_profile, if neeeded

"

    devops_setup

    echo "

################################################################################

  Some great commands to see sample docker or kubernetes commands can be found with:

    dhelp     # DevOps Help
    khelp     # Kubernetes Help

  Drop us a line, let us know how it's going:

    devops_program@pingidentity.com
    "
}

########################################################################################################################
# base64-encode the provided string or file contents and remove any new lines (both line feeds and carriage returns).
#
# Arguments
#   ${1} -> The string to base-64 encode, or a file whose contents to base64-encode.
########################################################################################################################
base64_no_newlines() {
  if test -f "${1}"; then
    cat "${1}" | $BASE64 | tr -d '\r?\n'
  else
    echo -n "${1}" | $BASE64 | tr -d '\r?\n'
  fi
}

################################################################################
# main
################################################################################

#test -z "${1}" && usage

case "${1}" in
    config)
        shift
        devops_config
        ;;

    examples)
        shift
        print_examples "${1}"
        ;;

    generate)
        shift
        _resource="${1}"
        shift
        _params="${*}"

        generate_resource "${_resource}" ${_params}
        ;;

    generate-profile)
        shift
        _product="${1}"
        shift
        _params="${*}"

        generate_profile "${_product}" ${_params}
        ;;

    info)
        shift
        ping_devops_info
        ;;
    *)
        usage
        ;;
esac


